Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> array
Rule 1     array -> [ elements ]
Rule 2     elements -> element
Rule 3     elements -> element , elements
Rule 4     element -> WS_STRING
Rule 5     element -> NOWS_STRING

Terminals, with rules where they appear

,                    : 3
NOWS_STRING          : 5
WS_STRING            : 4
[                    : 1
]                    : 1
error                : 

Nonterminals, with rules where they appear

array                : 0
element              : 2 3
elements             : 1 3

Parsing method: LALR

state 0

    (0) S' -> . array
    (1) array -> . [ elements ]

    [               shift and go to state 2

    array                          shift and go to state 1

state 1

    (0) S' -> array .



state 2

    (1) array -> [ . elements ]
    (2) elements -> . element
    (3) elements -> . element , elements
    (4) element -> . WS_STRING
    (5) element -> . NOWS_STRING

    WS_STRING       shift and go to state 6
    NOWS_STRING     shift and go to state 4

    elements                       shift and go to state 3
    element                        shift and go to state 5

state 3

    (1) array -> [ elements . ]

    ]               shift and go to state 7


state 4

    (5) element -> NOWS_STRING .

    ,               reduce using rule 5 (element -> NOWS_STRING .)
    ]               reduce using rule 5 (element -> NOWS_STRING .)


state 5

    (2) elements -> element .
    (3) elements -> element . , elements

    ]               reduce using rule 2 (elements -> element .)
    ,               shift and go to state 8


state 6

    (4) element -> WS_STRING .

    ,               reduce using rule 4 (element -> WS_STRING .)
    ]               reduce using rule 4 (element -> WS_STRING .)


state 7

    (1) array -> [ elements ] .

    $end            reduce using rule 1 (array -> [ elements ] .)


state 8

    (3) elements -> element , . elements
    (2) elements -> . element
    (3) elements -> . element , elements
    (4) element -> . WS_STRING
    (5) element -> . NOWS_STRING

    WS_STRING       shift and go to state 6
    NOWS_STRING     shift and go to state 4

    elements                       shift and go to state 9
    element                        shift and go to state 5

state 9

    (3) elements -> element , elements .

    ]               reduce using rule 3 (elements -> element , elements .)

