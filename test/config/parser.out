Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> config
Rule 1     config -> configElements
Rule 2     configElements -> configElement
Rule 3     configElements -> configElement configElements
Rule 4     configElements -> empty
Rule 5     configElement -> attributeName = attributeValue ;
Rule 6     configElement -> section
Rule 7     section -> [ sectionName ] { configElements }
Rule 8     sectionName -> NOWS_STRING
Rule 9     attributeValue -> stringValue
Rule 10    attributeValue -> arrayValue
Rule 11    attributeValue -> dictionary
Rule 12    stringValue -> WS_STRING
Rule 13    stringValue -> NOWS_STRING
Rule 14    attributeName -> NOWS_STRING
Rule 15    arrayValue -> [ arrayElements ]
Rule 16    arrayElements -> arrayElement
Rule 17    arrayElements -> arrayElement , arrayElements
Rule 18    arrayElements -> empty
Rule 19    arrayElement -> WS_STRING
Rule 20    arrayElement -> NOWS_STRING
Rule 21    dictionary -> { dictElements }
Rule 22    dictElements -> dictElement
Rule 23    dictElements -> dictElement , dictElements
Rule 24    dictElements -> empty
Rule 25    dictElement -> dictKey : dictValue
Rule 26    dictKey -> NOWS_STRING
Rule 27    dictKey -> WS_STRING
Rule 28    dictValue -> NOWS_STRING
Rule 29    dictValue -> WS_STRING
Rule 30    empty -> <empty>

Terminals, with rules where they appear

,                    : 17 23
:                    : 25
;                    : 5
=                    : 5
NEWLINE              : 
NOWS_STRING          : 8 13 14 20 26 28
WS_STRING            : 12 19 27 29
[                    : 7 15
]                    : 7 15
error                : 
{                    : 7 21
}                    : 7 21

Nonterminals, with rules where they appear

arrayElement         : 16 17
arrayElements        : 15 17
arrayValue           : 10
attributeName        : 5
attributeValue       : 5
config               : 0
configElement        : 2 3
configElements       : 1 3 7
dictElement          : 22 23
dictElements         : 21 23
dictKey              : 25
dictValue            : 25
dictionary           : 11
empty                : 4 18 24
section              : 6
sectionName          : 7
stringValue          : 9

Parsing method: LALR

state 0

    (0) S' -> . config
    (1) config -> . configElements
    (2) configElements -> . configElement
    (3) configElements -> . configElement configElements
    (4) configElements -> . empty
    (5) configElement -> . attributeName = attributeValue ;
    (6) configElement -> . section
    (30) empty -> .
    (14) attributeName -> . NOWS_STRING
    (7) section -> . [ sectionName ] { configElements }

    $end            reduce using rule 30 (empty -> .)
    NOWS_STRING     shift and go to state 6
    [               shift and go to state 5

    section                        shift and go to state 2
    configElements                 shift and go to state 3
    attributeName                  shift and go to state 4
    config                         shift and go to state 1
    empty                          shift and go to state 7
    configElement                  shift and go to state 8

state 1

    (0) S' -> config .



state 2

    (6) configElement -> section .

    NOWS_STRING     reduce using rule 6 (configElement -> section .)
    [               reduce using rule 6 (configElement -> section .)
    }               reduce using rule 6 (configElement -> section .)
    $end            reduce using rule 6 (configElement -> section .)


state 3

    (1) config -> configElements .

    $end            reduce using rule 1 (config -> configElements .)


state 4

    (5) configElement -> attributeName . = attributeValue ;

    =               shift and go to state 9


state 5

    (7) section -> [ . sectionName ] { configElements }
    (8) sectionName -> . NOWS_STRING

    NOWS_STRING     shift and go to state 11

    sectionName                    shift and go to state 10

state 6

    (14) attributeName -> NOWS_STRING .

    =               reduce using rule 14 (attributeName -> NOWS_STRING .)


state 7

    (4) configElements -> empty .

    $end            reduce using rule 4 (configElements -> empty .)
    }               reduce using rule 4 (configElements -> empty .)


state 8

    (2) configElements -> configElement .
    (3) configElements -> configElement . configElements
    (2) configElements -> . configElement
    (3) configElements -> . configElement configElements
    (4) configElements -> . empty
    (5) configElement -> . attributeName = attributeValue ;
    (6) configElement -> . section
    (30) empty -> .
    (14) attributeName -> . NOWS_STRING
    (7) section -> . [ sectionName ] { configElements }

  ! reduce/reduce conflict for $end resolved using rule 2 (configElements -> configElement .)
  ! reduce/reduce conflict for } resolved using rule 2 (configElements -> configElement .)
    $end            reduce using rule 2 (configElements -> configElement .)
    }               reduce using rule 2 (configElements -> configElement .)
    NOWS_STRING     shift and go to state 6
    [               shift and go to state 5

  ! $end            [ reduce using rule 30 (empty -> .) ]
  ! }               [ reduce using rule 30 (empty -> .) ]

    section                        shift and go to state 2
    configElements                 shift and go to state 12
    attributeName                  shift and go to state 4
    empty                          shift and go to state 7
    configElement                  shift and go to state 8

state 9

    (5) configElement -> attributeName = . attributeValue ;
    (9) attributeValue -> . stringValue
    (10) attributeValue -> . arrayValue
    (11) attributeValue -> . dictionary
    (12) stringValue -> . WS_STRING
    (13) stringValue -> . NOWS_STRING
    (15) arrayValue -> . [ arrayElements ]
    (21) dictionary -> . { dictElements }

    WS_STRING       shift and go to state 20
    NOWS_STRING     shift and go to state 17
    [               shift and go to state 19
    {               shift and go to state 13

    attributeValue                 shift and go to state 14
    dictionary                     shift and go to state 15
    stringValue                    shift and go to state 18
    arrayValue                     shift and go to state 16

state 10

    (7) section -> [ sectionName . ] { configElements }

    ]               shift and go to state 21


state 11

    (8) sectionName -> NOWS_STRING .

    ]               reduce using rule 8 (sectionName -> NOWS_STRING .)


state 12

    (3) configElements -> configElement configElements .

    $end            reduce using rule 3 (configElements -> configElement configElements .)
    }               reduce using rule 3 (configElements -> configElement configElements .)


state 13

    (21) dictionary -> { . dictElements }
    (22) dictElements -> . dictElement
    (23) dictElements -> . dictElement , dictElements
    (24) dictElements -> . empty
    (25) dictElement -> . dictKey : dictValue
    (30) empty -> .
    (26) dictKey -> . NOWS_STRING
    (27) dictKey -> . WS_STRING

    }               reduce using rule 30 (empty -> .)
    NOWS_STRING     shift and go to state 23
    WS_STRING       shift and go to state 27

    dictKey                        shift and go to state 22
    dictElement                    shift and go to state 24
    empty                          shift and go to state 26
    dictElements                   shift and go to state 25

state 14

    (5) configElement -> attributeName = attributeValue . ;

    ;               shift and go to state 28


state 15

    (11) attributeValue -> dictionary .

    ;               reduce using rule 11 (attributeValue -> dictionary .)


state 16

    (10) attributeValue -> arrayValue .

    ;               reduce using rule 10 (attributeValue -> arrayValue .)


state 17

    (13) stringValue -> NOWS_STRING .

    ;               reduce using rule 13 (stringValue -> NOWS_STRING .)


state 18

    (9) attributeValue -> stringValue .

    ;               reduce using rule 9 (attributeValue -> stringValue .)


state 19

    (15) arrayValue -> [ . arrayElements ]
    (16) arrayElements -> . arrayElement
    (17) arrayElements -> . arrayElement , arrayElements
    (18) arrayElements -> . empty
    (19) arrayElement -> . WS_STRING
    (20) arrayElement -> . NOWS_STRING
    (30) empty -> .

    WS_STRING       shift and go to state 33
    NOWS_STRING     shift and go to state 30
    ]               reduce using rule 30 (empty -> .)

    arrayElements                  shift and go to state 31
    empty                          shift and go to state 32
    arrayElement                   shift and go to state 29

state 20

    (12) stringValue -> WS_STRING .

    ;               reduce using rule 12 (stringValue -> WS_STRING .)


state 21

    (7) section -> [ sectionName ] . { configElements }

    {               shift and go to state 34


state 22

    (25) dictElement -> dictKey . : dictValue

    :               shift and go to state 35


state 23

    (26) dictKey -> NOWS_STRING .

    :               reduce using rule 26 (dictKey -> NOWS_STRING .)


state 24

    (22) dictElements -> dictElement .
    (23) dictElements -> dictElement . , dictElements

    }               reduce using rule 22 (dictElements -> dictElement .)
    ,               shift and go to state 36


state 25

    (21) dictionary -> { dictElements . }

    }               shift and go to state 37


state 26

    (24) dictElements -> empty .

    }               reduce using rule 24 (dictElements -> empty .)


state 27

    (27) dictKey -> WS_STRING .

    :               reduce using rule 27 (dictKey -> WS_STRING .)


state 28

    (5) configElement -> attributeName = attributeValue ; .

    NOWS_STRING     reduce using rule 5 (configElement -> attributeName = attributeValue ; .)
    [               reduce using rule 5 (configElement -> attributeName = attributeValue ; .)
    }               reduce using rule 5 (configElement -> attributeName = attributeValue ; .)
    $end            reduce using rule 5 (configElement -> attributeName = attributeValue ; .)


state 29

    (16) arrayElements -> arrayElement .
    (17) arrayElements -> arrayElement . , arrayElements

    ]               reduce using rule 16 (arrayElements -> arrayElement .)
    ,               shift and go to state 38


state 30

    (20) arrayElement -> NOWS_STRING .

    ,               reduce using rule 20 (arrayElement -> NOWS_STRING .)
    ]               reduce using rule 20 (arrayElement -> NOWS_STRING .)


state 31

    (15) arrayValue -> [ arrayElements . ]

    ]               shift and go to state 39


state 32

    (18) arrayElements -> empty .

    ]               reduce using rule 18 (arrayElements -> empty .)


state 33

    (19) arrayElement -> WS_STRING .

    ,               reduce using rule 19 (arrayElement -> WS_STRING .)
    ]               reduce using rule 19 (arrayElement -> WS_STRING .)


state 34

    (7) section -> [ sectionName ] { . configElements }
    (2) configElements -> . configElement
    (3) configElements -> . configElement configElements
    (4) configElements -> . empty
    (5) configElement -> . attributeName = attributeValue ;
    (6) configElement -> . section
    (30) empty -> .
    (14) attributeName -> . NOWS_STRING
    (7) section -> . [ sectionName ] { configElements }

    }               reduce using rule 30 (empty -> .)
    NOWS_STRING     shift and go to state 6
    [               shift and go to state 5

    section                        shift and go to state 2
    configElements                 shift and go to state 40
    attributeName                  shift and go to state 4
    empty                          shift and go to state 7
    configElement                  shift and go to state 8

state 35

    (25) dictElement -> dictKey : . dictValue
    (28) dictValue -> . NOWS_STRING
    (29) dictValue -> . WS_STRING

    NOWS_STRING     shift and go to state 41
    WS_STRING       shift and go to state 43

    dictValue                      shift and go to state 42

state 36

    (23) dictElements -> dictElement , . dictElements
    (22) dictElements -> . dictElement
    (23) dictElements -> . dictElement , dictElements
    (24) dictElements -> . empty
    (25) dictElement -> . dictKey : dictValue
    (30) empty -> .
    (26) dictKey -> . NOWS_STRING
    (27) dictKey -> . WS_STRING

    }               reduce using rule 30 (empty -> .)
    NOWS_STRING     shift and go to state 23
    WS_STRING       shift and go to state 27

    dictKey                        shift and go to state 22
    dictElement                    shift and go to state 24
    empty                          shift and go to state 26
    dictElements                   shift and go to state 44

state 37

    (21) dictionary -> { dictElements } .

    ;               reduce using rule 21 (dictionary -> { dictElements } .)


state 38

    (17) arrayElements -> arrayElement , . arrayElements
    (16) arrayElements -> . arrayElement
    (17) arrayElements -> . arrayElement , arrayElements
    (18) arrayElements -> . empty
    (19) arrayElement -> . WS_STRING
    (20) arrayElement -> . NOWS_STRING
    (30) empty -> .

    WS_STRING       shift and go to state 33
    NOWS_STRING     shift and go to state 30
    ]               reduce using rule 30 (empty -> .)

    arrayElement                   shift and go to state 29
    empty                          shift and go to state 32
    arrayElements                  shift and go to state 45

state 39

    (15) arrayValue -> [ arrayElements ] .

    ;               reduce using rule 15 (arrayValue -> [ arrayElements ] .)


state 40

    (7) section -> [ sectionName ] { configElements . }

    }               shift and go to state 46


state 41

    (28) dictValue -> NOWS_STRING .

    ,               reduce using rule 28 (dictValue -> NOWS_STRING .)
    }               reduce using rule 28 (dictValue -> NOWS_STRING .)


state 42

    (25) dictElement -> dictKey : dictValue .

    ,               reduce using rule 25 (dictElement -> dictKey : dictValue .)
    }               reduce using rule 25 (dictElement -> dictKey : dictValue .)


state 43

    (29) dictValue -> WS_STRING .

    ,               reduce using rule 29 (dictValue -> WS_STRING .)
    }               reduce using rule 29 (dictValue -> WS_STRING .)


state 44

    (23) dictElements -> dictElement , dictElements .

    }               reduce using rule 23 (dictElements -> dictElement , dictElements .)


state 45

    (17) arrayElements -> arrayElement , arrayElements .

    ]               reduce using rule 17 (arrayElements -> arrayElement , arrayElements .)


state 46

    (7) section -> [ sectionName ] { configElements } .

    NOWS_STRING     reduce using rule 7 (section -> [ sectionName ] { configElements } .)
    [               reduce using rule 7 (section -> [ sectionName ] { configElements } .)
    $end            reduce using rule 7 (section -> [ sectionName ] { configElements } .)
    }               reduce using rule 7 (section -> [ sectionName ] { configElements } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 8 resolved using rule (configElements -> configElement)
WARNING: rejected rule (empty -> <empty>) in state 8
